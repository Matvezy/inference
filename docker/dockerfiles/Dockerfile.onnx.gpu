# Stage 1: Build OpenCV with CUDA support
FROM nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS opencv_builder

# Install dependencies for building OpenCV
ENV CUDA_PKG_VERSION 11-8
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        git \
        pkg-config \
        libgtk-3-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libtbb2 \
        libtbb-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libdc1394-dev \
        libxine2-dev \
        libv4l-dev \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        libopenblas-dev \
        libatlas-base-dev \
        libblas-dev \
        liblapack-dev \
        gfortran \
        python3-dev \
        python3-pip \
        cuda-cudart-dev-${CUDA_PKG_VERSION} \
        cuda-driver-dev-${CUDA_PKG_VERSION} \
        && rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN python3 -m pip install -U "pip" "numpy<=1.26.4"

# Set OpenCV version to build
ARG OPENCV_VERSION="4.x"

# Clone OpenCV repositories
WORKDIR /opt
RUN git clone --branch ${OPENCV_VERSION} --depth 1 https://github.com/opencv/opencv.git && \
    git clone --branch ${OPENCV_VERSION} --depth 1 https://github.com/opencv/opencv_contrib.git

# Build OpenCV with CUDA support and include contrib modules
RUN mkdir -p /opt/opencv/build && cd /opt/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
          -D PYTHON3_PACKAGES_PATH=$(python3 -c "import site; print(site.getsitepackages()[0])") \
          -D CMAKE_CXX_COMPILER=/usr/bin/g++ \
          -D CUDA_HOST_COMPILER=/usr/bin/g++ \
          -D CMAKE_CXX_STANDARD=17 \
          -D PYTHON3_EXECUTABLE=$(which python3) \
          -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
          -D PYTHON3_LIBRARY=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
          -D PYTHON3_NUMPY_INCLUDE_DIRS=$(python3 -c "import numpy; print(numpy.get_include())") \
          -D BUILD_EXAMPLES=OFF \
          -D BUILD_opencv_cudacodec=ON \
          -D BUILD_opencv_python3=ON \
          -D CPACK_BINARY_PYTHON=ON \
          -D CUDA_ARCH_BIN="6.1;7.5;8.0;8.6;8.9;9.0" \
          -D CUDA_ARCH_PTX= \
          -D CUDA_FAST_MATH=1 \
          -D ENABLE_FAST_MATH=1 \
          -D INSTALL_C_EXAMPLES=OFF \
          -D INSTALL_PYTHON_EXAMPLES=OFF \
          -D OPENCV_DNN_CUDA=ON \
          -D WITH_CUBLAS=1 \
          -D WITH_CUDA=ON \
          -D WITH_CUDNN=ON \
          -D WITH_CUFFT=ON \
          -D WITH_EIGEN=ON \
          -D WITH_GSTREAMER=ON \
          -D WITH_GTK=OFF \
          -D WITH_QT=OFF \
          -D WITH_VTK=OFF \
          .. && \
    make -j$(nproc) install

# Ensure OpenCV libraries are found at runtime by setting LD_LIBRARY_PATH
RUN echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf && ldconfig

# Stage 2: Build the final image
FROM nvcr.io/nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS base

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libxext6 \
        uvicorn \
        python3-pip \
        git \
        libgdal-dev \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        libharfbuzz-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libavutil-dev \
        wget \
        && rm -rf /var/lib/apt/lists/*

# Create symlink for python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Upgrade pip
RUN python3 -m pip install -U pip

# Copy and install the OpenCV Python bindings
COPY --from=opencv_builder /usr/local/lib/python3.10/dist-packages/cv2 /usr/local/lib/python3.10/dist-packages/cv2
COPY --from=opencv_builder /usr/local/lib/libopencv*.so* /usr/local/lib/
RUN ldconfig

# Copy your requirements files
COPY requirements/requirements.sam.txt \
     requirements/requirements.clip.txt \
     requirements/requirements.http.txt \
     requirements/requirements.gpu.txt \
     requirements/requirements.waf.txt \
     requirements/requirements.gaze.txt \
     requirements/requirements.doctr.txt \
     requirements/requirements.groundingdino.txt \
     requirements/requirements.cogvlm.txt \
     requirements/requirements.yolo_world.txt \
     requirements/_requirements.txt \
     requirements/requirements.transformers.txt \
     requirements/requirements.pali.flash_attn.txt \
     ./

# Install your Python packages
RUN python3 -m pip install \
    --extra-index-url https://download.pytorch.org/whl/cu118 \
    --extra-index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-11/pypi/simple/ \
    --upgrade \
    -r _requirements.txt \
    -r requirements.sam.txt \
    -r requirements.clip.txt \
    -r requirements.http.txt \
    -r requirements.gpu.txt \
    -r requirements.waf.txt \
    -r requirements.gaze.txt \
    -r requirements.groundingdino.txt \
    -r requirements.doctr.txt \
    -r requirements.cogvlm.txt \
    -r requirements.yolo_world.txt \
    -r requirements.transformers.txt \
    jupyterlab \
    && rm -rf ~/.cache/pip

# Install setup.py requirements for flash_attn
RUN python3 -m pip install packaging==24.1 && rm -rf ~/.cache/pip

# Install flash_attn required for Paligemma and Florence2
RUN python3 -m pip install -r requirements.pali.flash_attn.txt --no-build-isolation && rm -rf ~/.cache/pip

WORKDIR /build
COPY . .

RUN /bin/make create_wheels_for_gpu_notebook
RUN python3 -m pip install dist/inference_cli*.whl dist/inference_core*.whl dist/inference_gpu*.whl dist/inference_sdk*.whl

WORKDIR /notebooks
COPY examples/notebooks .

WORKDIR /app/
COPY inference inference
COPY docker/config/gpu_http.py gpu_http.py

# Environment variables
ENV VERSION_CHECK_MODE=continuous
ENV PROJECT=roboflow-platform
ENV NUM_WORKERS=1
ENV HOST=0.0.0.0
ENV PORT=9001
ENV WORKFLOWS_STEP_EXECUTION_MODE=local
ENV WORKFLOWS_MAX_CONCURRENT_STEPS=4
ENV API_LOGGING_ENABLED=True
ENV LMM_ENABLED=True
ENV CORE_MODEL_SAM2_ENABLED=True
ENV CORE_MODEL_OWLV2_ENABLED=True
ENV ENABLE_STREAM_API=True
ENV ENABLE_WORKFLOWS_PROFILING=True
ENV ENABLE_PROMETHEUS=True

ENTRYPOINT uvicorn gpu_http:app --workers $NUM_WORKERS --host $HOST --port $PORT
